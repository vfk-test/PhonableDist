// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1.2 (swiftlang-1100.0.278 clang-1100.0.33.9)
// swift-module-flags: -target i386-apple-ios10.3-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name VerifyKit
import CoreTelephony
import CryptoSwift
import Foundation
import Swift
import SystemConfiguration
import UIKit
@_exported import VerifyKit
public enum VerifyKitError : Swift.Error {
  case authorizationError
  case apiError(description: Swift.String)
  case urlSchemeError
}
public enum VerifyKitEnvironment {
  case debug
  case release
  public static func == (a: VerifyKit.VerifyKitEnvironment, b: VerifyKit.VerifyKitEnvironment) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct VerifyKitTheme {
  public var appName: Swift.String
  public var statusBarStyle: UIKit.UIStatusBarStyle
  public var navigationBarBackgroundColor: UIKit.UIColor
  public var navigationBarForegroundColor: UIKit.UIColor
  public var backgroundColor: UIKit.UIColor
  public var textColor: UIKit.UIColor
  public init(appName: Swift.String = "VerifyKit", statusBarStyle: UIKit.UIStatusBarStyle = .default, navigationBarBackgroundColor: UIKit.UIColor = UIColor(red: 0.964, green: 0.964, blue: 0.968, alpha: 1.0), navigationBarForegroundColor: UIKit.UIColor = .black, backgroundColor: UIKit.UIColor = .white, textColor: UIKit.UIColor = .darkText)
}
public struct VerifyKitOptions {
  public init(environment: VerifyKit.VerifyKitEnvironment = .debug, logActive: Swift.Bool = true, theme: VerifyKit.VerifyKitTheme = VerifyKitTheme())
}
public protocol VerifyKitDelegate : UIKit.UIViewController {
  func didSuccess(with sessionCode: Swift.String)
  func didFail(with error: VerifyKit.VerifyKitError)
}
public protocol VerifyKitViewController : UIKit.UIViewController {
  var kitDelegate: VerifyKit.VerifyKitDelegate? { get set }
}
public enum ReachabilityError : Swift.Error {
  case failedToCreateWithAddress(Darwin.sockaddr, Swift.Int32)
  case failedToCreateWithHostname(Swift.String, Swift.Int32)
  case unableToSetCallback(Swift.Int32)
  case unableToSetDispatchQueue(Swift.Int32)
  case unableToGetFlags(Swift.Int32)
}
@available(*, unavailable, renamed: "Notification.Name.reachabilityChanged")
public let ReachabilityChangedNotification: Foundation.NSNotification.Name
extension NSNotification.Name {
  public static let reachabilityChanged: Foundation.Notification.Name
}
public class Reachability {
  public typealias NetworkReachable = (VerifyKit.Reachability) -> ()
  public typealias NetworkUnreachable = (VerifyKit.Reachability) -> ()
  @available(*, unavailable, renamed: "Connection")
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable, reachableViaWiFi, reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: VerifyKit.Reachability.NetworkStatus, b: VerifyKit.Reachability.NetworkStatus) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public enum Connection : Swift.CustomStringConvertible {
    @available(*, deprecated, renamed: "unavailable")
    case none
    case unavailable, wifi, cellular
    public var description: Swift.String {
      get
    }
    public static func == (a: VerifyKit.Reachability.Connection, b: VerifyKit.Reachability.Connection) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public var whenReachable: VerifyKit.Reachability.NetworkReachable?
  public var whenUnreachable: VerifyKit.Reachability.NetworkUnreachable?
  @available(*, deprecated, renamed: "allowsCellularConnection")
  final public let reachableOnWWAN: Swift.Bool
  public var allowsCellularConnection: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  @available(*, deprecated, renamed: "connection.description")
  public var currentReachabilityString: Swift.String {
    get
  }
  @available(*, unavailable, renamed: "connection")
  public var currentReachabilityStatus: VerifyKit.Reachability.Connection {
    get
  }
  public var connection: VerifyKit.Reachability.Connection {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main)
  convenience public init(hostname: Swift.String, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  convenience public init(queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  @objc deinit
}
extension Reachability {
  public func startNotifier() throws
  public func stopNotifier()
  @available(*, deprecated, message: "Please use `connection != .none`")
  public var isReachable: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .cellular`")
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .wifi`")
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
public protocol CheckSessionProtocol : AnyObject {
  static func checkInterruptedSession(completion: @escaping (Swift.String?) -> Swift.Void)
}
extension CheckSessionProtocol {
  public static func checkInterruptedSession(completion: @escaping (Swift.String?) -> Swift.Void)
}
final public class VerifyKit : VerifyKit.CheckSessionProtocol {
  public init()
  public init(options: VerifyKit.VerifyKitOptions)
  final public func viewControllerForLogin() -> VerifyKit.VerifyKitViewController
  @objc deinit
}
extension VerifyKit.VerifyKitEnvironment : Swift.Equatable {}
extension VerifyKit.VerifyKitEnvironment : Swift.Hashable {}
@available(*, unavailable, renamed: "Connection")
extension VerifyKit.Reachability.NetworkStatus : Swift.Equatable {}
@available(*, unavailable, renamed: "Connection")
extension VerifyKit.Reachability.NetworkStatus : Swift.Hashable {}
extension VerifyKit.Reachability.Connection : Swift.Equatable {}
extension VerifyKit.Reachability.Connection : Swift.Hashable {}
